// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"
)

// PathNode is an autogenerated mock type for the PathNode type
type PathNode struct {
	mock.Mock
}

type PathNode_Expecter struct {
	mock *mock.Mock
}

func (_m *PathNode) EXPECT() *PathNode_Expecter {
	return &PathNode_Expecter{mock: &_m.Mock}
}

// IsReady provides a mock function with given fields: c
func (_m *PathNode) IsReady(c *engine.Context) bool {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for IsReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*engine.Context) bool); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PathNode_IsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReady'
type PathNode_IsReady_Call struct {
	*mock.Call
}

// IsReady is a helper method to define mock.On call
//   - c *engine.Context
func (_e *PathNode_Expecter) IsReady(c interface{}) *PathNode_IsReady_Call {
	return &PathNode_IsReady_Call{Call: _e.mock.On("IsReady", c)}
}

func (_c *PathNode_IsReady_Call) Run(run func(c *engine.Context)) *PathNode_IsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.Context))
	})
	return _c
}

func (_c *PathNode_IsReady_Call) Return(_a0 bool) *PathNode_IsReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PathNode_IsReady_Call) RunAndReturn(run func(*engine.Context) bool) *PathNode_IsReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewPathNode creates a new instance of PathNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPathNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *PathNode {
	mock := &PathNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
