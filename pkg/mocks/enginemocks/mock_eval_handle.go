// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"
)

// EvalHandle is an autogenerated mock type for the EvalHandle type
type EvalHandle struct {
	mock.Mock
}

type EvalHandle_Expecter struct {
	mock *mock.Mock
}

func (_m *EvalHandle) EXPECT() *EvalHandle_Expecter {
	return &EvalHandle_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: err
func (_m *EvalHandle) Cancel(err error) {
	_m.Called(err)
}

// EvalHandle_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type EvalHandle_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - err error
func (_e *EvalHandle_Expecter) Cancel(err interface{}) *EvalHandle_Cancel_Call {
	return &EvalHandle_Cancel_Call{Call: _e.mock.On("Cancel", err)}
}

func (_c *EvalHandle_Cancel_Call) Run(run func(err error)) *EvalHandle_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *EvalHandle_Cancel_Call) Return() *EvalHandle_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *EvalHandle_Cancel_Call) RunAndReturn(run func(error)) *EvalHandle_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Cause provides a mock function with given fields:
func (_m *EvalHandle) Cause() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvalHandle_Cause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cause'
type EvalHandle_Cause_Call struct {
	*mock.Call
}

// Cause is a helper method to define mock.On call
func (_e *EvalHandle_Expecter) Cause() *EvalHandle_Cause_Call {
	return &EvalHandle_Cause_Call{Call: _e.mock.On("Cause")}
}

func (_c *EvalHandle_Cause_Call) Run(run func()) *EvalHandle_Cause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EvalHandle_Cause_Call) Return(_a0 error) *EvalHandle_Cause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EvalHandle_Cause_Call) RunAndReturn(run func() error) *EvalHandle_Cause_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with given fields:
func (_m *EvalHandle) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// EvalHandle_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type EvalHandle_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *EvalHandle_Expecter) Done() *EvalHandle_Done_Call {
	return &EvalHandle_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *EvalHandle_Done_Call) Run(run func()) *EvalHandle_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EvalHandle_Done_Call) Return(_a0 <-chan struct{}) *EvalHandle_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EvalHandle_Done_Call) RunAndReturn(run func() <-chan struct{}) *EvalHandle_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with given fields:
func (_m *EvalHandle) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvalHandle_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type EvalHandle_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *EvalHandle_Expecter) Err() *EvalHandle_Err_Call {
	return &EvalHandle_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *EvalHandle_Err_Call) Run(run func()) *EvalHandle_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EvalHandle_Err_Call) Return(_a0 error) *EvalHandle_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EvalHandle_Err_Call) RunAndReturn(run func() error) *EvalHandle_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Instruction provides a mock function with given fields:
func (_m *EvalHandle) Instruction() engine.Instruction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Instruction")
	}

	var r0 engine.Instruction
	if rf, ok := ret.Get(0).(func() engine.Instruction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Instruction)
		}
	}

	return r0
}

// EvalHandle_Instruction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instruction'
type EvalHandle_Instruction_Call struct {
	*mock.Call
}

// Instruction is a helper method to define mock.On call
func (_e *EvalHandle_Expecter) Instruction() *EvalHandle_Instruction_Call {
	return &EvalHandle_Instruction_Call{Call: _e.mock.On("Instruction")}
}

func (_c *EvalHandle_Instruction_Call) Run(run func()) *EvalHandle_Instruction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EvalHandle_Instruction_Call) Return(_a0 engine.Instruction) *EvalHandle_Instruction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EvalHandle_Instruction_Call) RunAndReturn(run func() engine.Instruction) *EvalHandle_Instruction_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvalHandle creates a new instance of EvalHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvalHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *EvalHandle {
	mock := &EvalHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
