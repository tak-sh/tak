// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"
)

// Evaluator is an autogenerated mock type for the Evaluator type
type Evaluator struct {
	mock.Mock
}

type Evaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *Evaluator) EXPECT() *Evaluator_Expecter {
	return &Evaluator_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function with given fields: c, i
func (_m *Evaluator) Eval(c *engine.Context, i engine.Instruction) error {
	ret := _m.Called(c, i)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*engine.Context, engine.Instruction) error); ok {
		r0 = rf(c, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Evaluator_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type Evaluator_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - c *engine.Context
//   - i engine.Instruction
func (_e *Evaluator_Expecter) Eval(c interface{}, i interface{}) *Evaluator_Eval_Call {
	return &Evaluator_Eval_Call{Call: _e.mock.On("Eval", c, i)}
}

func (_c *Evaluator_Eval_Call) Run(run func(c *engine.Context, i engine.Instruction)) *Evaluator_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.Context), args[1].(engine.Instruction))
	})
	return _c
}

func (_c *Evaluator_Eval_Call) Return(_a0 error) *Evaluator_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Evaluator_Eval_Call) RunAndReturn(run func(*engine.Context, engine.Instruction) error) *Evaluator_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// Prev provides a mock function with given fields:
func (_m *Evaluator) Prev() engine.Instruction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Prev")
	}

	var r0 engine.Instruction
	if rf, ok := ret.Get(0).(func() engine.Instruction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Instruction)
		}
	}

	return r0
}

// Evaluator_Prev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prev'
type Evaluator_Prev_Call struct {
	*mock.Call
}

// Prev is a helper method to define mock.On call
func (_e *Evaluator_Expecter) Prev() *Evaluator_Prev_Call {
	return &Evaluator_Prev_Call{Call: _e.mock.On("Prev")}
}

func (_c *Evaluator_Prev_Call) Run(run func()) *Evaluator_Prev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Evaluator_Prev_Call) Return(_a0 engine.Instruction) *Evaluator_Prev_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Evaluator_Prev_Call) RunAndReturn(run func() engine.Instruction) *Evaluator_Prev_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvaluator creates a new instance of Evaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvaluator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Evaluator {
	mock := &Evaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
