// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	context "context"

	goquery "github.com/PuerkitoBio/goquery"

	mock "github.com/stretchr/testify/mock"
)

// Browser is an autogenerated mock type for the Browser type
type Browser struct {
	mock.Mock
}

type Browser_Expecter struct {
	mock *mock.Mock
}

func (_m *Browser) EXPECT() *Browser_Expecter {
	return &Browser_Expecter{mock: &_m.Mock}
}

// Content provides a mock function with given fields: ctx, selector
func (_m *Browser) Content(ctx context.Context, selector string) (*goquery.Document, error) {
	ret := _m.Called(ctx, selector)

	if len(ret) == 0 {
		panic("no return value specified for Content")
	}

	var r0 *goquery.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*goquery.Document, error)); ok {
		return rf(ctx, selector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *goquery.Document); ok {
		r0 = rf(ctx, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goquery.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Browser_Content_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Content'
type Browser_Content_Call struct {
	*mock.Call
}

// Content is a helper method to define mock.On call
//   - ctx context.Context
//   - selector string
func (_e *Browser_Expecter) Content(ctx interface{}, selector interface{}) *Browser_Content_Call {
	return &Browser_Content_Call{Call: _e.mock.On("Content", ctx, selector)}
}

func (_c *Browser_Content_Call) Run(run func(ctx context.Context, selector string)) *Browser_Content_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Browser_Content_Call) Return(_a0 *goquery.Document, _a1 error) *Browser_Content_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Browser_Content_Call) RunAndReturn(run func(context.Context, string) (*goquery.Document, error)) *Browser_Content_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, sel
func (_m *Browser) Exists(ctx context.Context, sel string) bool {
	ret := _m.Called(ctx, sel)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, sel)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Browser_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Browser_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - sel string
func (_e *Browser_Expecter) Exists(ctx interface{}, sel interface{}) *Browser_Exists_Call {
	return &Browser_Exists_Call{Call: _e.mock.On("Exists", ctx, sel)}
}

func (_c *Browser_Exists_Call) Run(run func(ctx context.Context, sel string)) *Browser_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Browser_Exists_Call) Return(_a0 bool) *Browser_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_Exists_Call) RunAndReturn(run func(context.Context, string) bool) *Browser_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Navigate provides a mock function with given fields: ctx, addr
func (_m *Browser) Navigate(ctx context.Context, addr string) error {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for Navigate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Browser_Navigate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Navigate'
type Browser_Navigate_Call struct {
	*mock.Call
}

// Navigate is a helper method to define mock.On call
//   - ctx context.Context
//   - addr string
func (_e *Browser_Expecter) Navigate(ctx interface{}, addr interface{}) *Browser_Navigate_Call {
	return &Browser_Navigate_Call{Call: _e.mock.On("Navigate", ctx, addr)}
}

func (_c *Browser_Navigate_Call) Run(run func(ctx context.Context, addr string)) *Browser_Navigate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Browser_Navigate_Call) Return(_a0 error) *Browser_Navigate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_Navigate_Call) RunAndReturn(run func(context.Context, string) error) *Browser_Navigate_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPage provides a mock function with given fields: ctx, content
func (_m *Browser) RefreshPage(ctx context.Context, content *string) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Browser_RefreshPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPage'
type Browser_RefreshPage_Call struct {
	*mock.Call
}

// RefreshPage is a helper method to define mock.On call
//   - ctx context.Context
//   - content *string
func (_e *Browser_Expecter) RefreshPage(ctx interface{}, content interface{}) *Browser_RefreshPage_Call {
	return &Browser_RefreshPage_Call{Call: _e.mock.On("RefreshPage", ctx, content)}
}

func (_c *Browser_RefreshPage_Call) Run(run func(ctx context.Context, content *string)) *Browser_RefreshPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string))
	})
	return _c
}

func (_c *Browser_RefreshPage_Call) Return(_a0 error) *Browser_RefreshPage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_RefreshPage_Call) RunAndReturn(run func(context.Context, *string) error) *Browser_RefreshPage_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with given fields: ctx
func (_m *Browser) URL(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Browser_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type Browser_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Browser_Expecter) URL(ctx interface{}) *Browser_URL_Call {
	return &Browser_URL_Call{Call: _e.mock.On("URL", ctx)}
}

func (_c *Browser_URL_Call) Run(run func(ctx context.Context)) *Browser_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Browser_URL_Call) Return(_a0 string, _a1 error) *Browser_URL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Browser_URL_Call) RunAndReturn(run func(context.Context) (string, error)) *Browser_URL_Call {
	_c.Call.Return(run)
	return _c
}

// WriteInput provides a mock function with given fields: ctx, selector, content
func (_m *Browser) WriteInput(ctx context.Context, selector string, content string) error {
	ret := _m.Called(ctx, selector, content)

	if len(ret) == 0 {
		panic("no return value specified for WriteInput")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, selector, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Browser_WriteInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteInput'
type Browser_WriteInput_Call struct {
	*mock.Call
}

// WriteInput is a helper method to define mock.On call
//   - ctx context.Context
//   - selector string
//   - content string
func (_e *Browser_Expecter) WriteInput(ctx interface{}, selector interface{}, content interface{}) *Browser_WriteInput_Call {
	return &Browser_WriteInput_Call{Call: _e.mock.On("WriteInput", ctx, selector, content)}
}

func (_c *Browser_WriteInput_Call) Run(run func(ctx context.Context, selector string, content string)) *Browser_WriteInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Browser_WriteInput_Call) Return(_a0 error) *Browser_WriteInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_WriteInput_Call) RunAndReturn(run func(context.Context, string, string) error) *Browser_WriteInput_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowser creates a new instance of Browser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Browser {
	mock := &Browser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
