// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	goquery "github.com/PuerkitoBio/goquery"
	mock "github.com/stretchr/testify/mock"
)

// UpdateHTMLFunc is an autogenerated mock type for the UpdateHTMLFunc type
type UpdateHTMLFunc struct {
	mock.Mock
}

type UpdateHTMLFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateHTMLFunc) EXPECT() *UpdateHTMLFunc_Expecter {
	return &UpdateHTMLFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: sel
func (_m *UpdateHTMLFunc) Execute(sel *goquery.Selection) error {
	ret := _m.Called(sel)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*goquery.Selection) error); ok {
		r0 = rf(sel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHTMLFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type UpdateHTMLFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - sel *goquery.Selection
func (_e *UpdateHTMLFunc_Expecter) Execute(sel interface{}) *UpdateHTMLFunc_Execute_Call {
	return &UpdateHTMLFunc_Execute_Call{Call: _e.mock.On("Execute", sel)}
}

func (_c *UpdateHTMLFunc_Execute_Call) Run(run func(sel *goquery.Selection)) *UpdateHTMLFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goquery.Selection))
	})
	return _c
}

func (_c *UpdateHTMLFunc_Execute_Call) Return(_a0 error) *UpdateHTMLFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpdateHTMLFunc_Execute_Call) RunAndReturn(run func(*goquery.Selection) error) *UpdateHTMLFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdateHTMLFunc creates a new instance of UpdateHTMLFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateHTMLFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateHTMLFunc {
	mock := &UpdateHTMLFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
