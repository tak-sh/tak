// Code generated by mockery v2.43.2. DO NOT EDIT.

package enginemocks

import (
	goquery "github.com/PuerkitoBio/goquery"
	mock "github.com/stretchr/testify/mock"
)

// DOMQuery is an autogenerated mock type for the DOMQuery type
type DOMQuery struct {
	mock.Mock
}

type DOMQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *DOMQuery) EXPECT() *DOMQuery_Expecter {
	return &DOMQuery_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: doc
func (_m *DOMQuery) Query(doc *goquery.Selection) []*goquery.Selection {
	ret := _m.Called(doc)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []*goquery.Selection
	if rf, ok := ret.Get(0).(func(*goquery.Selection) []*goquery.Selection); ok {
		r0 = rf(doc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*goquery.Selection)
		}
	}

	return r0
}

// DOMQuery_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type DOMQuery_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - doc *goquery.Selection
func (_e *DOMQuery_Expecter) Query(doc interface{}) *DOMQuery_Query_Call {
	return &DOMQuery_Query_Call{Call: _e.mock.On("Query", doc)}
}

func (_c *DOMQuery_Query_Call) Run(run func(doc *goquery.Selection)) *DOMQuery_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goquery.Selection))
	})
	return _c
}

func (_c *DOMQuery_Query_Call) Return(_a0 []*goquery.Selection) *DOMQuery_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DOMQuery_Query_Call) RunAndReturn(run func(*goquery.Selection) []*goquery.Selection) *DOMQuery_Query_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *DOMQuery) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DOMQuery_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type DOMQuery_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *DOMQuery_Expecter) String() *DOMQuery_String_Call {
	return &DOMQuery_String_Call{Call: _e.mock.On("String")}
}

func (_c *DOMQuery_String_Call) Run(run func()) *DOMQuery_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DOMQuery_String_Call) Return(_a0 string) *DOMQuery_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DOMQuery_String_Call) RunAndReturn(run func() string) *DOMQuery_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewDOMQuery creates a new instance of DOMQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDOMQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *DOMQuery {
	mock := &DOMQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
