// Code generated by mockery v2.43.2. DO NOT EDIT.

package steppermocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"

	stepper "github.com/tak-sh/tak/pkg/headless/step/stepper"
)

// Stepper is an autogenerated mock type for the Stepper type
type Stepper struct {
	mock.Mock
}

type Stepper_Expecter struct {
	mock *mock.Mock
}

func (_m *Stepper) EXPECT() *Stepper_Expecter {
	return &Stepper_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with given fields: c
func (_m *Stepper) Next(c *engine.Context) stepper.Handle {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 stepper.Handle
	if rf, ok := ret.Get(0).(func(*engine.Context) stepper.Handle); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stepper.Handle)
		}
	}

	return r0
}

// Stepper_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type Stepper_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - c *engine.Context
func (_e *Stepper_Expecter) Next(c interface{}) *Stepper_Next_Call {
	return &Stepper_Next_Call{Call: _e.mock.On("Next", c)}
}

func (_c *Stepper_Next_Call) Run(run func(c *engine.Context)) *Stepper_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.Context))
	})
	return _c
}

func (_c *Stepper_Next_Call) Return(_a0 stepper.Handle) *Stepper_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Stepper_Next_Call) RunAndReturn(run func(*engine.Context) stepper.Handle) *Stepper_Next_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Stepper) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Stepper_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Stepper_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Stepper_Expecter) String() *Stepper_String_Call {
	return &Stepper_String_Call{Call: _e.mock.On("String")}
}

func (_c *Stepper_String_Call) Run(run func()) *Stepper_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Stepper_String_Call) Return(_a0 string) *Stepper_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Stepper_String_Call) RunAndReturn(run func() string) *Stepper_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewStepper creates a new instance of Stepper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStepper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Stepper {
	mock := &Stepper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
