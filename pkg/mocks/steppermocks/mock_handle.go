// Code generated by mockery v2.43.2. DO NOT EDIT.

package steppermocks

import (
	mock "github.com/stretchr/testify/mock"
	step "github.com/tak-sh/tak/pkg/headless/step"

	stepper "github.com/tak-sh/tak/pkg/headless/step/stepper"
)

// Handle is an autogenerated mock type for the Handle type
type Handle struct {
	mock.Mock
}

type Handle_Expecter struct {
	mock *mock.Mock
}

func (_m *Handle) EXPECT() *Handle_Expecter {
	return &Handle_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *Handle) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handle_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Handle_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Handle_Expecter) Err() *Handle_Err_Call {
	return &Handle_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Handle_Err_Call) Run(run func()) *Handle_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handle_Err_Call) Return(_a0 error) *Handle_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handle_Err_Call) RunAndReturn(run func() error) *Handle_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function with given fields:
func (_m *Handle) Node() *stepper.Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 *stepper.Node
	if rf, ok := ret.Get(0).(func() *stepper.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stepper.Node)
		}
	}

	return r0
}

// Handle_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type Handle_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *Handle_Expecter) Node() *Handle_Node_Call {
	return &Handle_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *Handle_Node_Call) Run(run func()) *Handle_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handle_Node_Call) Return(_a0 *stepper.Node) *Handle_Node_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handle_Node_Call) RunAndReturn(run func() *stepper.Node) *Handle_Node_Call {
	_c.Call.Return(run)
	return _c
}

// Signal provides a mock function with given fields:
func (_m *Handle) Signal() *step.ConditionalSignal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signal")
	}

	var r0 *step.ConditionalSignal
	if rf, ok := ret.Get(0).(func() *step.ConditionalSignal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*step.ConditionalSignal)
		}
	}

	return r0
}

// Handle_Signal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signal'
type Handle_Signal_Call struct {
	*mock.Call
}

// Signal is a helper method to define mock.On call
func (_e *Handle_Expecter) Signal() *Handle_Signal_Call {
	return &Handle_Signal_Call{Call: _e.mock.On("Signal")}
}

func (_c *Handle_Signal_Call) Run(run func()) *Handle_Signal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handle_Signal_Call) Return(_a0 *step.ConditionalSignal) *Handle_Signal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handle_Signal_Call) RunAndReturn(run func() *step.ConditionalSignal) *Handle_Signal_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Handle) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Handle_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Handle_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Handle_Expecter) String() *Handle_String_Call {
	return &Handle_String_Call{Call: _e.mock.On("String")}
}

func (_c *Handle_String_Call) Run(run func()) *Handle_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handle_String_Call) Return(_a0 string) *Handle_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handle_String_Call) RunAndReturn(run func() string) *Handle_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandle creates a new instance of Handle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handle {
	mock := &Handle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
