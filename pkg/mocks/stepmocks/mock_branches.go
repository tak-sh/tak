// Code generated by mockery v2.43.2. DO NOT EDIT.

package stepmocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"
)

// Branches is an autogenerated mock type for the Branches type
type Branches struct {
	mock.Mock
}

type Branches_Expecter struct {
	mock *mock.Mock
}

func (_m *Branches) EXPECT() *Branches_Expecter {
	return &Branches_Expecter{mock: &_m.Mock}
}

// Statements provides a mock function with given fields:
func (_m *Branches) Statements() []engine.Instruction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Statements")
	}

	var r0 []engine.Instruction
	if rf, ok := ret.Get(0).(func() []engine.Instruction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]engine.Instruction)
		}
	}

	return r0
}

// Branches_Statements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Statements'
type Branches_Statements_Call struct {
	*mock.Call
}

// Statements is a helper method to define mock.On call
func (_e *Branches_Expecter) Statements() *Branches_Statements_Call {
	return &Branches_Statements_Call{Call: _e.mock.On("Statements")}
}

func (_c *Branches_Statements_Call) Run(run func()) *Branches_Statements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Branches_Statements_Call) Return(_a0 []engine.Instruction) *Branches_Statements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Branches_Statements_Call) RunAndReturn(run func() []engine.Instruction) *Branches_Statements_Call {
	_c.Call.Return(run)
	return _c
}

// NewBranches creates a new instance of Branches. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranches(t interface {
	mock.TestingT
	Cleanup(func())
}) *Branches {
	mock := &Branches{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
