// Code generated by mockery v2.43.2. DO NOT EDIT.

package stepmocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// Act provides a mock function with given fields: ctx
func (_m *Action) Act(ctx *engine.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Act")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*engine.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Act_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Act'
type Action_Act_Call struct {
	*mock.Call
}

// Act is a helper method to define mock.On call
//   - ctx *engine.Context
func (_e *Action_Expecter) Act(ctx interface{}) *Action_Act_Call {
	return &Action_Act_Call{Call: _e.mock.On("Act", ctx)}
}

func (_c *Action_Act_Call) Run(run func(ctx *engine.Context)) *Action_Act_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.Context))
	})
	return _c
}

func (_c *Action_Act_Call) Return(_a0 error) *Action_Act_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Act_Call) RunAndReturn(run func(*engine.Context) error) *Action_Act_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *Action) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Action_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type Action_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *Action_Expecter) GetID() *Action_GetID_Call {
	return &Action_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *Action_GetID_Call) Run(run func()) *Action_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_GetID_Call) Return(_a0 string) *Action_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_GetID_Call) RunAndReturn(run func() string) *Action_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Action) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Action_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Action_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Action_Expecter) String() *Action_String_Call {
	return &Action_String_Call{Call: _e.mock.On("String")}
}

func (_c *Action_String_Call) Run(run func()) *Action_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_String_Call) Return(_a0 string) *Action_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_String_Call) RunAndReturn(run func() string) *Action_String_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *Action) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Action_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *Action_Expecter) Validate() *Action_Validate_Call {
	return &Action_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *Action_Validate_Call) Run(run func()) *Action_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Validate_Call) Return(_a0 error) *Action_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Validate_Call) RunAndReturn(run func() error) *Action_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
