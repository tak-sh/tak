// Code generated by mockery v2.43.2. DO NOT EDIT.

package stepmocks

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/tak-sh/tak/pkg/headless/engine"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	time "time"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function with given fields: c, to
func (_m *Action) Eval(c *engine.Context, to time.Duration) error {
	ret := _m.Called(c, to)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*engine.Context, time.Duration) error); ok {
		r0 = rf(c, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type Action_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - c *engine.Context
//   - to time.Duration
func (_e *Action_Expecter) Eval(c interface{}, to interface{}) *Action_Eval_Call {
	return &Action_Eval_Call{Call: _e.mock.On("Eval", c, to)}
}

func (_c *Action_Eval_Call) Run(run func(c *engine.Context, to time.Duration)) *Action_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*engine.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Action_Eval_Call) Return(_a0 error) *Action_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Eval_Call) RunAndReturn(run func(*engine.Context, time.Duration) error) *Action_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with given fields:
func (_m *Action) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Action_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type Action_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *Action_Expecter) GetId() *Action_GetId_Call {
	return &Action_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *Action_GetId_Call) Run(run func()) *Action_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_GetId_Call) Return(_a0 string) *Action_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_GetId_Call) RunAndReturn(run func() string) *Action_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function with given fields:
func (_m *Action) Message() protoreflect.ProtoMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 protoreflect.ProtoMessage
	if rf, ok := ret.Get(0).(func() protoreflect.ProtoMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.ProtoMessage)
		}
	}

	return r0
}

// Action_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type Action_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *Action_Expecter) Message() *Action_Message_Call {
	return &Action_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *Action_Message_Call) Run(run func()) *Action_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Message_Call) Return(_a0 protoreflect.ProtoMessage) *Action_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Message_Call) RunAndReturn(run func() protoreflect.ProtoMessage) *Action_Message_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Action) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Action_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Action_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Action_Expecter) String() *Action_String_Call {
	return &Action_String_Call{Call: _e.mock.On("String")}
}

func (_c *Action_String_Call) Run(run func()) *Action_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_String_Call) Return(_a0 string) *Action_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_String_Call) RunAndReturn(run func() string) *Action_String_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *Action) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Action_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Action_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *Action_Expecter) Validate() *Action_Validate_Call {
	return &Action_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *Action_Validate_Call) Run(run func()) *Action_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Action_Validate_Call) Return(_a0 error) *Action_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Action_Validate_Call) RunAndReturn(run func() error) *Action_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
