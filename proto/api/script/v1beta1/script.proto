syntax = "proto3";

package tak.sh.api.script.v1beta1;

option go_package = "github.com/tak-sh/tak/generated/go/api/script/v1beta1";

// A way to programmatically control what the headless browser should do.
message Script {
  repeated Step steps = 1;
  // The signal to mark that the Script has completed. At least one success signal
  // is required.
  repeated ConditionalSignal signals = 2;
}

// A single line within a Script.
message Step {
  // A top-level referential key for the Step. If not provided, the result is not
  // stored nor is it accessible by following Steps. If it is provided, any following
  // Step can refer to the value returned by the Action.
  optional string id = 1;

  // Provide the action that should be taken for this Step.
  Action action = 2;

  // Optional list of signals that can be triggered based on what is being shown
  // on the page or the overall state of the step.
  repeated ConditionalSignal signals = 3;
}

message Action {
  // A field representing the value of an Action.
  message Value {
    // Hardcode the value for the action.
    string raw = 1;
  }

  // Click on an element.
  message MouseClick {
    string selector = 1;
    // If true, the mouse will double click.
    optional bool double = 2;
  }

  // Input text into a field.
  message Input {
    string selector = 1;

    // Provide a value for the input action. This could be hardcoded or a variable reference.
    string value = 2;
  }

  message Nav {
    // A URL to navigate to.
    string addr = 1;
  }

  // Prompt the user for some data.
  message PromptUser {
    Prompt prompt = 1;
  }

  // A group of actions to execute.
  message Branch {
    // If the field is truthy, this Branch will be taken.
    string if = 1;

    // The steps that are executed as part of this Branch
    repeated Step steps = 2;
  }

  // Store arbitrary values into the `step.[id]` field.
  message Store {
    repeated KeyVal key_vals = 1 [json_name = "key_vals"];
  }

  // Click on an element.
  optional MouseClick mouse_click = 1 [json_name = "mouse_click"];

  // Input some text into an element.
  optional Input input = 2;

  // Ask the user for some information.
  optional PromptUser ask = 3;

  optional Nav nav = 4;

  optional Branch branch = 5;

  optional Store store = 6;
}

message Prompt {
  // A user-friendly description for what you're asking. This is displayed above the component.
  optional string description = 1;

  // A user-friendly and short title for the prompt.
  string title = 2;

  // The component to display to the user.
  Component component = 3;
}

// Mutually exclusive set of components that can be displayed to the user. Only a single field
// can be set.
message Component {
  // Choose from a set of predefined options.
  message Dropdown {
    message Option {
      // A hardcoded value for the option. Accepts a variable reference.
      string value = 1;

      // If true, the option is not shown.
      optional bool hidden = 2;

      // If true, the option is not selectable.
      optional bool disabled = 3;

      // If provided, the option shows the given text. If not, the value
      // field is shown.
      optional string text = 4;
    }

    message OptionMerge {
      // If truthy, the Option field is applied to every Dropdown option.
      optional string if = 1;

      // The fields to merge into the Dropdown options.
      Option option = 2;
    }

    message FromSpec {
      EachSelector selector = 1;
      // Iterates through every element of the EachSelector and maps each
      // element via template expressions.
      Option mapper = 2;
    }

    repeated Option options = 1;

    // A variable reference that populates the options. If the options field is also set, this
    // is appended to it. Useful if you want to dynamically create a dropdown from an arbitrary
    // list of options on the page.
    optional FromSpec from = 2;

    // If specified, merge the specified fields into every option for the Dropdown.
    repeated OptionMerge merge = 3;
  }

  message Input {
    enum Type {
      TEXT = 0;
      PASSWORD = 1;
    }

    // Defaults to TEXT.
    Type type = 1;
  }

  optional Dropdown dropdown = 1;
  optional Input input = 2;
}

// A dynamic primitive value. All fields are mutually exclusive.
message Value {
  optional string str = 1;
  repeated string str_list = 2 [json_name = "str_list"];
}

message KeyVal {
  string key = 1;
  string value = 2;
}

// Selects specific fields for each element of a matching query. This functions like the each function
// in jQuery: https://api.jquery.com/jquery.each/.
message EachSelector {
  // A selector string that matches the list of elements.
  string list_selector = 1 [json_name = "list_selector"];

  // A selector string that is called on every element returned from Selector that aims to
  // extract the desired value from the element.
  string iterator = 2;
}

message HTMLNodeTemplateData {
  message Attribute {
    string val = 1;
    string namespace = 2;
  }

  // The stringified child of the element.
  string data = 1;

  // The attributes on the HTML node.
  map<string, Attribute> attrs = 2;

  // The element type e.g. span
  string element = 3;
}

message BrowserTemplateData {
  // The current URL for the browser.
  string url = 1;
  // The raw HTML of the page.
  string content = 2;
}

message ScriptTemplateData {
  // A step ID mapped to the resulting value.
  map<string, string> step = 1;
  BrowserTemplateData browser = 2;
  // If a particular element from the page is being targeted, this will be available
  // as a template variable.
  HTMLNodeTemplateData element = 3;

  // If within the context of a Dropdown component, e.g. when evaluating the if condition,
  // this field will be made available.
  Component.Dropdown.Option option = 4;

  // If within the context of a for_each statement, this field will be populated with
  // the current element within the collection that is being iterated upon.
  map<string, string> each = 5;
}

// Signals that something has happened based on if a condition returns a truthy
// value.
message ConditionalSignal {
  enum Signal {
    unknown = 0;
    // A terminating signal that the operation is complete. If this signal is sent for
    // a step, the Step will not run and effectively skips it. If it's sent for the
    // Script, then the Script exits and is considered complete.
    success = 1;
    // A terminating signal that an error has occurred.
    error = 2;
  }

  // If a truthy value is set, the Signal is sent.
  string if = 1;

  // The signal that will be sent if the condition is met.
  Signal signal = 2;
  // An optional message providing more context as to why the signal occurred.
  optional string message = 3;
}
